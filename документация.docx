ПОДГОТОВКА РАБОЧЕГО МЕСТА
Клонируем библиотеки:
1 (https://github.com/bjornstenger/xml2yolo.git) - папка xml2yolo, данная библиотека нужна для измения формата xml
2 (!git clone https://github.com/ManzarIMalik/YOLO-Annotation-Tool.git) - папка YOLO-Annotation-Tool, данная библиотека нужна для просмотра пропусков 
3 (!git clone https://github.com/Taeyoung96/Yolo-to-COCO-format-converter.git) - папка Yolo-to-COCO-format-converter, данная библиотека нужна для записи в json
4 (!git clone https://github.com/ultralytics/yolov5) - папка yolov5, данная библиотека нужна для создания модели нейро сети  

теперь устанавливаем необходимые библиотеки:
1 pathlib - Удобный для чтения и простой способ создания путей, представляя пути файловой системы в виде надлежащих объектов. 
            Модуль позволяет создавать код, который можно переносить между платформами.
2 numpy - Это библиотека. Она ускоряет работу с многомерными массивами и матрицами, 
          а также позволяет вычислять много высокоуровневых математических функций при работе с массивами данных. 
3 opencv-python - Это открытая библиотека для работы с алгоритмами компьютерного зрения, машинным обучением и обработкой изображений.
4 imagesize - Это библиотека для обработки изображений, которая позволяет получать размеры изображений во время выполнения. 
5 scikit-learn - Это библиотека машинного обучения с открытым исходным кодом, которая поддерживает обучение с учителем и без учителя. 
                 Библиотека также предоставляет различные инструменты для подбора модели, предварительной обработки данных, выбора модели, оценки модели и многие другие утилиты.
6 -r yolov5/requirements.txt - Это текстовой файл, содержащий список пакетов или библиотек, необходимых для работы над проектом. Это обеспечивает согласованность среды и облегчает совместную работу.
7 easyocr - Библиотека для распознания текста с поддержкой более 80 языков и всех популярных письменностей
8 streamlit -  это фреймворк для языка программирования Python. Он содержит набор программных инструментов, которые помогают перенести модель машинного обучения в веб.
9 pillow - Эта библиотека обеспечивает обширную поддержку форматов файлов, эффективное внутреннее представление и довольно мощные возможности обработки изображений.
10 torch - Это библиотека для глубокого обучения с открытым исходным кодом. С ее помощью компьютер может обнаруживать объекты, классифицировать изображения, генерировать тексты и выполнять другие сложные задачи.

из официального репозитория yolov5 скачиваем веса yolov5n и yolov5s 
вот две сылки для скачивания:

https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5n.pt

https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s.pt

скачиваем в папку где будем работать т.е в папку zub

Дальше надо настроить yolo на работу без интернета поэтому мы запускаем следущий код

!python yolov5/train.py  --weights yolov5n.pt --epochs 1

В папке zub появилась папка dataset/coco128 в которую входят папки:
1 images - фотографии 
2 labels - разметка в формате xml
3 LICENSE
4 README.txt
Данный dataset был взять из GitHub и нужно заменить данные папок images и labels  на всои картинки и разметку к ним.
После того как мы настроили yolo на работу без интернета  нужно загрузить модели нейро сети которая заборает с русским и английским текстом.
( код:
# библеотека с предобученной моделью
import easyocr
# загружаем предобученную модель на английских буквам
reader = easyocr.Reader(['en', 'ru'], gpu = False) )

Дальше идёт выполнение самого конкурсного задания 

МОДУЛЬ А
Предообрабатываем изначальные данные

В полученных, в ходе работы данных, мы хотим получить следующую структуру:
в папке dataset:
images - фотографии
labels - разметка единого формата YOLO
labels.txt - файл с названием класса
Если посмотреть на папку dataset то можно увидеть другую структуру:
images - фотографии
labels - разметка единого формата YOLO
поэтому надо создать файл labels.txt, в Нём написать название классов. В двнном случаи один класс который будет отвечать за расположение номера машины, поэтому пишем licence.
После сохранения заходим в папку xml2yolo и там ищем папку convert.py, в нем меняем название 0 класса на licence так как именно он указан во всех файлах xml и сохраняем. Переносим наш изменённый файл в папку labels к разметке xml и запускаем спомощью Run current file in interactive window.
Теперь у каждой разметки в формате xml есть разметка в txt yolo, теперь надо удалить xml разметку:
( код: 
import os
# удаляем файлы в формате xml
# в dir_name указываем путь к нашей такой же папке
dir_name = "C:/zub/datasets/coco128/labels"
test = os.listdir(dir_name)

for item in test:
    if item.endswith(".xml"):
        os.remove(os.path.join(dir_name, item)) )

РАЗМЕСТКА ДАННЫХ 
Для разметки даннных требуется установить git, с помощью которого установить удобной утилитой для разметки данных формата YOLO.
( %cd C:/zub/YOLO-Annotation-Tool )

В самой программе разметки выбираем картинки и классы и их разметку, доразмечаем и сохраняем как yolo.
(  %cd C:/zub/YOLO-Annotation-Tool
!Annotate.html
%cd C:/zub/datasets/coco128/labels )
Через скачанную выше утилиту мы проверяем фотографии на соответсвие с разметкой и наличие пропусков, если пропуски найдены то заполняем их и сохраняем в yolo.
( %cd C:/zub/datasets/coco128/labels )
( import os
# забираем данные картинок путь указываем наш
images = [os.path.join('C:/zub/datasets/coco128/images', x) for x in os.listdir('C:/zub/datasets/coco128/images')]
# Так как для загрузки в нашу модель данные разметки должны быть в отдельных файлах мы дублируем их из папки с ними, для дальнейшей разбивки на тестовые, обучающие и валидационные.
labels = [os.path.join('C:/zub/datasets/coco128/labels', x) for x in os.listdir('C:/zub/datasets/coco128/labels')] )

РАЗДЕЛЕНИЕ НАБОРА ДАННЫХ НП ТРЕНИРОВАЧНЫЕ И ТЕСТОВЫЕ 
Для обучения модели и проверки её качества нам требуется разделить наш предобработанный датасет на три папки. Обучающую, тестовую и валидационную. Последняя нужна для проверки переобучения во время обучения.
Для этотого в каждой из папок (images, labels) создаем по 3 папки (train, test, val)
дальше пишем код:
( from sklearn.model_selection import train_test_split 
# производим разделение всех наших данных на Тренировочные и валидационные
train_images, val_images, train_annotations, val_annotations = train_test_split(images, labels, test_size=0.15, random_state=42)
# валидационные данные делим на тестовые и валидационные, чтобы одни использовать для тестирования пока обучается, а вторые для тестирования после обучения
val_images, test_images, val_annotations, test_annotations = train_test_split(val_images, val_annotations, test_size=0.5, random_state=42) )
Выпадает ошибка: ValueError: Found input variables with inconsistent numbers of samples: [436, 437]
изходя из этой ошибки можно судить что значение папок (images, label ) не совпадают, т.е количество элементов в папках на одинаковое.
Проверяем где отличается, а именно где большее значение:
( len(images) ) - 436
( len(labels) ) - 437
Заходим в папку labels и понимаем что файл convert.py как раз дабовляет +1 значение, поэтому возврящаем этот файл в папку xml2yolo. Нажимаем Restart и проверяем.
Проблема решина! 
Создаем папку new в папке zub куда булем переносить данные.
( код:
import os
# Создаем папки куда будем переносить наши разбитые на 3 набора данные фотографий
parent = 'C:/zub/new'
dirs = 'images/train', 'images/val', 'images/test', 'labels/train', 'labels/val', 'labels/test'
for dir in dirs:
    path = os.path.join(parent, dir)
    # проверяем существование папки чтобы не создавать если уже есть
    if not os.path.exists(path):
        # создаем папку
        os.makedirs(path) )
Видим что в папке new появились папки images и labels с внутреними папкеми train, test, val.
Далее переносим данные....
( код: 
)